https://github.com/typescript-cheatsheets/react


https://github.com/jherr/no-bs-ts/tree/master/series-1

________________________________________________


	// create payload 


interface Payload {
	text: string;
}



	// Now passing the type to hook i.e useState


const [payload, setPayload] = useState<Payload | null>(null);


	// Now fetching the data 


useEffect(() => {
	fetch("/data.json")
	.then(resp => resp.json())
	.then(data => {
		setPayload(data)
	}
}, [])



	// Now displaying the data


{JSON.stringify(payload)}


__________________________________________________



	// USEREDUCER
	// the first one is current state and the second one is action
	// The second arg for useReducer is starting state and the 1st one is function


interface Todo {
	id: number;
	done: boolean;
	text: string;
}


	// ActionType we define for functions


type ActionType = 
	| {type: "ADD", text: string}
	| {type: "REMOVE", id: number}




const [todos, dispatch] = useReducer((state:Todo[], action: ActionType) => {
	switch(action.type) {
		case "ADD":
		return [
			...state,
			{
			id: state.length,
			text: action.text,
			done: false,
			}
		]

		case "REMOVE":
		return [
			state.filter(({id}) => id !== action.id)
		]
	
		default:
			throw new Error()
	}
}, [])



________________________________________________________________



	// useRef hook


const todoRef = useRef<HTMLInputElement>(null)








